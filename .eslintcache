[{"C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\index.js":"1","C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\App.js":"2","C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\reportWebVitals.js":"3","C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\store.js":"4","C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\containers\\Dashboard.js":"5","C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\reducers\\index.js":"6","C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\reducers\\songListReducer.js":"7","C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\actions\\MusicActions.js":"8","C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\components\\Header.js":"9","C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\constants\\actionTypes.js":"10","C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\components\\SongsListPanel.js":"11","C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\components\\SearchPanel.js":"12","C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\components\\SongInfo.js":"13","C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\reducers\\photosListReducer.js":"14","C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\components\\PlaylistBox.js":"15","C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\components\\NewPlaylistPage.js":"16","C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\components\\ShowAllPlaylistPage.js":"17","C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\components\\EditPlaylistPage.js":"18"},{"size":313,"mtime":1610620922034,"results":"19","hashOfConfig":"20"},{"size":310,"mtime":1610790390670,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":499162500000,"results":"22","hashOfConfig":"20"},{"size":403,"mtime":1610603494525,"results":"23","hashOfConfig":"20"},{"size":16788,"mtime":1610878692255,"results":"24","hashOfConfig":"20"},{"size":199,"mtime":1610625132925,"results":"25","hashOfConfig":"20"},{"size":413,"mtime":1610786135253,"results":"26","hashOfConfig":"20"},{"size":1176,"mtime":1610717465837,"results":"27","hashOfConfig":"20"},{"size":1864,"mtime":1610874626545,"results":"28","hashOfConfig":"20"},{"size":168,"mtime":1610717449732,"results":"29","hashOfConfig":"20"},{"size":1627,"mtime":1610876884602,"results":"30","hashOfConfig":"20"},{"size":871,"mtime":1610877283085,"results":"31","hashOfConfig":"20"},{"size":10371,"mtime":1610874467898,"results":"32","hashOfConfig":"20"},{"size":423,"mtime":1610786131670,"results":"33","hashOfConfig":"20"},{"size":1915,"mtime":1610877446543,"results":"34","hashOfConfig":"20"},{"size":4848,"mtime":1610876921652,"results":"35","hashOfConfig":"20"},{"size":1204,"mtime":1610875334712,"results":"36","hashOfConfig":"20"},{"size":6558,"mtime":1610876943356,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1b7g68y",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"40"},"C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\index.js",[],["78","79"],"C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\App.js",[],"C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\reportWebVitals.js",[],"C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\store.js",[],"C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\containers\\Dashboard.js",[],"C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\reducers\\index.js",[],"C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\reducers\\songListReducer.js",[],"C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\actions\\MusicActions.js",[],"C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\components\\Header.js",[],"C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\constants\\actionTypes.js",[],"C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\components\\SongsListPanel.js",[],"C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\components\\SearchPanel.js",[],"C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\components\\SongInfo.js",[],"C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\reducers\\photosListReducer.js",[],["80","81"],"C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\components\\PlaylistBox.js",[],"C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\components\\NewPlaylistPage.js",["82"],"import React from \"react\";\r\nimport SearchPanel from \"../components/SearchPanel\";\r\nimport SongInfo from \"./SongInfo\";\r\n\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\n\r\nclass NewPlaylistPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            playlistName: ''\r\n        };\r\n\r\n        this.onPlaylistNameChange = this.onPlaylistNameChange.bind(this);\r\n        this.searchBoxChange = this.searchBoxChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.props.newPlaylistInfo) {\r\n            this.setState({ playlistName: this.props.newPlaylistInfo.playlistName })\r\n        }\r\n    }\r\n\r\n    searchBoxChange(event) {\r\n        this.props.searchBoxChange(event.target.value);\r\n    }\r\n\r\n    onPlaylistNameChange(event) {\r\n        this.setState({ playlistName: event.target.value })\r\n    }\r\n\r\n    savePlaylistAction(playlistInfo) {\r\n        playlistInfo.playlistName = this.state.playlistName;\r\n        this.props.savePlaylistFromNewPage(playlistInfo);\r\n    }\r\n\r\n    render() {\r\n        let songList = [];\r\n        let updatedSongsList = [];\r\n        let playlistSongs = [];\r\n        let playlistInfo = {};\r\n        \r\n        if(this.props.newPlaylistInfo) {\r\n            playlistInfo = this.props.newPlaylistInfo;\r\n            playlistSongs = playlistInfo.songs;\r\n        }\r\n\r\n        if(this.props.showFilteredResult && this.props.filteredSearchResult) {\r\n            songList = this.props.filteredSearchResult;\r\n        }\r\n        else {\r\n            songList = this.props.songList;\r\n        }\r\n        \r\n        updatedSongsList = songList;\r\n\r\n        playlistSongs.map((playlistSong, index) => {\r\n            let songExists = songList.some(song => song.id === playlistSong.songId);\r\n            if(songExists) {\r\n                updatedSongsList.splice(index, 1);\r\n            }\r\n        });\r\n\r\n        songList = updatedSongsList;\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row no-gutters mb-3\">\r\n                    <div className=\"col-sm-10 px-3\">\r\n                        <h3>                   \r\n                            <InputGroup className=\"mb-3\">\r\n                                <InputGroup.Prepend>\r\n                                <InputGroup.Text id=\"playlist-name\">\r\n                                    Playlist\r\n                                </InputGroup.Text>\r\n                                </InputGroup.Prepend>\r\n                                <FormControl\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            name=\"playlistName\"\r\n                                            id=\"playlistName\"\r\n                                            placeholder=\"playlist name \"\r\n                                            autoFocus=\"\"\r\n                                            onChange={this.onPlaylistNameChange}\r\n                                            autoComplete=\"off\"\r\n                                            value={this.state.playlistName}\r\n                                        />\r\n                            </InputGroup>\r\n                        </h3>\r\n                    </div>\r\n                    <div className=\"col-sm-2\">\r\n                        <ButtonGroup aria-label=\"list type\" className=\"d-flex\">\r\n                            <Button variant=\"light\" onClick={this.savePlaylistAction.bind(this, playlistInfo)}>\r\n                                Save playlist\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-sm-12  d-flex justify-content-center\">\r\n                    <div className=\"col-sm-8\">\r\n                        <SearchPanel \r\n                            searchBoxText={this.props.searchBoxText} \r\n                            searchBoxChange={this.searchBoxChange} \r\n                        />\r\n                    </div>\r\n                </div>\r\n                {\r\n                    this.props.photosList && songList && songList.map((song, index) => {                  \r\n                        return (\r\n                            <SongInfo key={index} song={song} photosList={this.props.photosList} showThumbnails={this.props.showThumbnails} \r\n                                showAddSongInPlaylist={true}\r\n                                addSongToNewPlaylist={this.props.addSongToNewPlaylist} />\r\n                            );\r\n                        })\r\n                }\r\n            </div>\r\n            );\r\n        }\r\n}\r\n\r\nexport default NewPlaylistPage;","C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\components\\ShowAllPlaylistPage.js",[],"C:\\Office\\OneDrive - Education First\\Learn\\My personnal git\\vbi-music-app\\src\\components\\EditPlaylistPage.js",["83"],"import React from \"react\";\r\nimport SearchPanel from \"../components/SearchPanel\";\r\nimport SongInfo from \"./SongInfo\";\r\n\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\n\r\nclass EditPlaylistPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            playlistName: ''\r\n        };\r\n\r\n        this.onPlaylistNameChange = this.onPlaylistNameChange.bind(this);\r\n        this.showNewSongsToAdd = this.showNewSongsToAdd.bind(this);\r\n        this.searchBoxChange = this.searchBoxChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.props.editPlaylistInfo) {\r\n            this.setState({ playlistName: this.props.editPlaylistInfo.playlistName });\r\n        }\r\n        else {\r\n            this.props.disableShowNewSongsInEditPlaylistPageIndicator();\r\n        }\r\n    }\r\n\r\n    searchBoxChange(event) {\r\n        this.props.searchBoxChange(event.target.value);\r\n    }\r\n\r\n    onPlaylistNameChange(event) {\r\n        this.setState({ playlistName: event.target.value })\r\n    }\r\n\r\n    savePlaylistAction(playlistInfo) {\r\n        playlistInfo.playlistName = this.state.playlistName;\r\n        this.props.savePlaylistFromEditPage(playlistInfo);\r\n    }\r\n    \r\n    shuffleSongsInPlaylist(playlistInfo) {\r\n        this.props.shufflePlaylistSongs(playlistInfo);\r\n    }\r\n\r\n    showNewSongsToAdd() {\r\n        this.props.setShowNewSongsInEditPlaylistPageIndicator();\r\n    }\r\n\r\n    render() {\r\n        let editPlayList = this.props.editPlaylistInfo;\r\n        let songList = editPlayList.songs;\r\n        let newSongsList = [];\r\n        let updatedNewSongsList = [];\r\n\r\n        if (this.props.showNewSongsInEditPlaylistPage) {\r\n            if(this.props.showFilteredResult && this.props.filteredSearchResult) {\r\n                newSongsList = this.props.filteredSearchResult;\r\n            }\r\n            else {\r\n                newSongsList = this.props.songList;\r\n            }\r\n            updatedNewSongsList = newSongsList;\r\n\r\n            newSongsList.map((newSong, index) => {\r\n                let songExists = songList.some(song => song.songId === newSong.id);\r\n                if(songExists) {\r\n                    updatedNewSongsList.splice(index, 1);\r\n                }\r\n            });\r\n\r\n            newSongsList = updatedNewSongsList;\r\n        }\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row no-gutters mb-3\">\r\n                    <div className=\"col-sm-6 px-3\">\r\n                        <h3>                   \r\n                            <InputGroup className=\"mb-3\">\r\n                                <InputGroup.Prepend>\r\n                                <InputGroup.Text id=\"playlist-name\">\r\n                                    Playlist\r\n                                </InputGroup.Text>\r\n                                </InputGroup.Prepend>\r\n                                <FormControl\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            name=\"playlistName\"\r\n                                            id=\"playlistName\"\r\n                                            placeholder=\"playlist name \"\r\n                                            autoFocus=\"\"\r\n                                            onChange={this.onPlaylistNameChange}\r\n                                            autoComplete=\"off\"\r\n                                            value={this.state.playlistName}\r\n                                        />\r\n                            </InputGroup>\r\n                        </h3>\r\n                    </div>\r\n                    <div className=\"col-sm-6\">\r\n                        <ButtonGroup aria-label=\"list type\" className=\"d-flex\">\r\n                            <Button variant=\"light\" onClick={this.shuffleSongsInPlaylist.bind(this, editPlayList)}>\r\n                                <i class=\"fas fa-random\"></i> Shuffle playlist\r\n                            </Button>\r\n                            <Button variant=\"light\" onClick={this.showNewSongsToAdd}>\r\n                                <i class=\"fas fa-plus\"></i> Add song\r\n                            </Button>\r\n                            <Button variant=\"light\" onClick={this.savePlaylistAction.bind(this, editPlayList)}>\r\n                                <i class=\"fas fa-save\"></i> Save playlist\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    this.props.showNewSongsInEditPlaylistPage ?\r\n                        <div className=\"col-sm-12  d-flex justify-content-center\">\r\n                            <div className=\"col-sm-8\">\r\n                                <SearchPanel \r\n                                    searchBoxText={this.props.searchBoxText} \r\n                                    searchBoxChange={this.searchBoxChange} \r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        : null \r\n                }\r\n            \r\n                {\r\n                    this.props.showNewSongsInEditPlaylistPage && newSongsList && newSongsList.map((newSong, index) => {\r\n                        return (\r\n                            <SongInfo key={index} song={newSong} photosList={this.props.photosList} showThumbnails={this.props.showThumbnails} bgColor={\"white\"}\r\n                                showAddSongInPlaylist={true} isEditPlaylist={true} showNewSongsList={true} addSongToEditPlaylist={this.props.addSongToEditPlaylist} />\r\n                            );\r\n                    })\r\n                }\r\n                \r\n                {\r\n                    songList && songList.map((song, index) => {                  \r\n                        return (\r\n                            <SongInfo key={index} song={song} showThumbnails={this.props.showThumbnails} bgColor={\"lavender\"}\r\n                                showDeleteSongInPlaylist={true} showAddSongInPlaylist={false} isEditPlaylist={true}  \r\n                                removeSongFromEditPlaylist={this.props.removeSongFromEditPlaylist} />\r\n                            );\r\n                        })\r\n                }                \r\n            </div>\r\n            );\r\n        }\r\n}\r\n\r\nexport default EditPlaylistPage;",{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"84","replacedBy":"88"},{"ruleId":"86","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":60,"column":49,"nodeType":"92","messageId":"93","endLine":60,"endColumn":51},{"ruleId":"90","severity":1,"message":"91","line":67,"column":47,"nodeType":"92","messageId":"93","endLine":67,"endColumn":49},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],["94"],["95"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]